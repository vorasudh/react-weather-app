{"version":3,"sources":["reducers/index.js","actions/index.js","components/sliderItem/index.jsx","components/carousel/index.jsx","App.jsx","serviceWorker.js","index.jsx","store.js"],"names":["rootReducer","combineReducers","weatherData","state","action","type","payload","item","temperatureUnit","Card","raised","elevation","variant","CardHeader","title","moment","unix","dt","format","subheader","CardContent","Table","className","aria-label","TableBody","TableRow","TableCell","align","Math","round","main","temp","feels_like","humidity","clouds","all","SlickSettings","dots","infinite","speed","slidesToShow","slidesToScroll","centerMode","centerPadding","arrows","responsive","breakpoint","settings","data","isLoading","map","key","URL","process","defaultCity","id","name","country","coord","lon","lat","defaultLottieOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","fetchWeatherData","cityId","units","fetch","then","response","ok","json","Promise","reject","Error","statusText","App","props","fetchWeatherInfo","a","selectedCity","setWeatherDataDispatch","setState","alert","handleChangeTemperature","event","target","value","handleChangeCity","selectedValue","cities","this","_","sortBy","Cities","Container","maxWidth","Autocomplete","options","getOptionLabel","option","defaultValue","onChange","renderInput","params","TextField","label","FormControl","component","FormLabel","RadioGroup","FormControlLabel","control","Radio","height","width","list","PureComponent","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","initialState","createStore","reducers","configureStore","AppBar","position","Toolbar","Typography","color","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.130fcd88.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nimport * as ActionTypes from '../actions';\n\nfunction weatherData(state = null, action) {\n\tswitch (action.type) {\n\tcase ActionTypes.WEATHER_DATA:\n\t\treturn action.payload;\n\tdefault:\n\t\treturn state;\n\t}\n}\n\nconst rootReducer = combineReducers({ weatherData });\n\nexport default rootReducer;\n","export const WEATHER_DATA = 'WEATHER_DATA';\nexport const setWeatherData = payload => ({ type: WEATHER_DATA, payload });\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport moment from 'moment';\n\nimport './styles.css';\n\nexport default ({ item, temperatureUnit }) => {\n\treturn (\n\t\t<Card raised elevation={2} variant='elevation'>\n\t\t\t<CardHeader\n\t\t\t\ttitle={moment.unix(item.dt).format('DD.MM.YYYY')}\n\t\t\t\tsubheader={moment.unix(item.dt).format('HH:mm:ss')}\n\t\t\t/>\n\t\t\t<CardContent>\n\t\t\t\t<Table className='data-table' aria-label='simple table'>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell>Temperature</TableCell>\n\t\t\t\t\t\t\t<TableCell align='right'>\n\t\t\t\t\t\t\t\t{Math.round(item.main.temp)}\n\t\t\t\t\t\t\t\t{temperatureUnit === 'metric' ? '째C' : '째F'}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell>Real Feel</TableCell>\n\t\t\t\t\t\t\t<TableCell align='right'>\n\t\t\t\t\t\t\t\t{Math.round(item.main.feels_like)}\n\t\t\t\t\t\t\t\t{temperatureUnit === 'metric' ? '째C' : '째F'}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell>Humidity</TableCell>\n\t\t\t\t\t\t\t<TableCell align='right'>{item.main.humidity}%</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t{item.clouds && (\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell>Clouds</TableCell>\n\t\t\t\t\t\t\t\t<TableCell align='right'>{item.clouds.all}%</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</CardContent>\n\t\t</Card>\n\t);\n};\n","import React from 'react';\nimport Slider from 'react-slick';\n\nimport SliderItem from '../sliderItem';\nimport './styles.css';\n\nconst SlickSettings = {\n\tdots: false,\n\tinfinite: false,\n\tspeed: 500,\n\tslidesToShow: 3,\n\tslidesToScroll: 1,\n\tcenterMode: true,\n\tcenterPadding: '40px',\n\tarrows: true,\n\tresponsive: [\n\t\t{\n\t\t\tbreakpoint: 960,\n\t\t\tsettings: {\n\t\t\t\tslidesToShow: 2,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tbreakpoint: 768,\n\t\t\tsettings: {\n\t\t\t\tslidesToShow: 1,\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default ({ data = [], temperatureUnit = '', isLoading = false }) => (\n\t<Slider {...SlickSettings}>\n\t\t{data.map(item => (\n\t\t\t<SliderItem key={item.dt} item={item} temperatureUnit={temperatureUnit} />\n\t\t))}\n\t</Slider>\n);\n","import React, { PureComponent } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Lottie from 'react-lottie';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport './styles.css';\nimport Carousel from './components/carousel';\nimport Cities from './utils/cities.json';\nimport * as animationData from './utils/loading-animation-data.json';\nimport { setWeatherData } from './actions';\n\nconst URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${process.env.REACT_APP_OPEN_WEATHER_API}`;\n\nconst defaultCity = {\n\tid: 2867714,\n\tname: 'Munich',\n\tstate: '',\n\tcountry: 'DE',\n\tcoord: {\n\t\tlon: 11.57549,\n\t\tlat: 48.137428,\n\t},\n};\n\nconst defaultLottieOptions = {\n\tloop: true,\n\tautoplay: true,\n\tanimationData: animationData.default,\n\trendererSettings: {\n\t\tpreserveAspectRatio: 'xMidYMid slice',\n\t},\n};\n\nconst fetchWeatherData = (cityId = '', units = 'metric') => {\n\treturn fetch(`${URL}&cnt=40&units=${units}&id=${cityId}`).then(response => {\n\t\tif (response && response.ok) {\n\t\t\treturn response.json();\n\t\t}\n\t\treturn Promise.reject(new Error(response.statusText));\n\t});\n};\n\nclass App extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.cities = [];\n\t\tthis.state = {\n\t\t\tisLoading: true,\n\t\t\tselectedCity: defaultCity,\n\t\t\ttemperatureUnit: 'metric',\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.cities = _.sortBy(Cities, 'name');\n\t\tthis.fetchWeatherInfo();\n\t}\n\n\tfetchWeatherInfo = async () => {\n\t\tconst { selectedCity, temperatureUnit } = this.state;\n\t\tconst { setWeatherDataDispatch } = this.props;\n\t\ttry {\n\t\t\tconst data = await fetchWeatherData(selectedCity.id, temperatureUnit);\n\t\t\tsetWeatherDataDispatch(data);\n\t\t\tthis.setState({ isLoading: false });\n\t\t} catch (error) {\n\t\t\tif (process.env.NODE_ENV === 'development') {\n\t\t\t\tconsole.log('error', error);\n\t\t\t}\n\t\t\tsetWeatherDataDispatch(null);\n\t\t\talert('Something went wrong. Please try again.');\n\t\t}\n\t};\n\n\thandleChangeTemperature = event => {\n\t\tthis.setState({ temperatureUnit: event.target.value, isLoading: true }, this.fetchWeatherInfo);\n\t};\n\n\thandleChangeCity = (event, selectedValue) => {\n\t\tif (selectedValue) {\n\t\t\tthis.setState({ selectedCity: selectedValue, isLoading: true }, this.fetchWeatherInfo);\n\t\t} else {\n\t\t\tthis.setState({ isLoading: true });\n\t\t\talert('Please select a city');\n\t\t}\n\t};\n\n\trender() {\n\t\tconst { temperatureUnit, isLoading } = this.state;\n\t\tconst { weatherData } = this.props;\n\t\treturn (\n\t\t\t<Container maxWidth='md' className='container'>\n\t\t\t\t<div className='selection-wrapper'>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tid='combo-box-demo'\n\t\t\t\t\t\toptions={this.cities}\n\t\t\t\t\t\tgetOptionLabel={option => option.name}\n\t\t\t\t\t\tdefaultValue={defaultCity}\n\t\t\t\t\t\tonChange={this.handleChangeCity}\n\t\t\t\t\t\trenderInput={params => <TextField {...params} label='Select City' variant='outlined' />}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormControl component='fieldset'>\n\t\t\t\t\t\t<FormLabel component='legend'>Temperature Unit</FormLabel>\n\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\taria-label='temperature'\n\t\t\t\t\t\t\tname='temperatureUnit'\n\t\t\t\t\t\t\tclassName='radio'\n\t\t\t\t\t\t\tvalue={temperatureUnit}\n\t\t\t\t\t\t\tonChange={this.handleChangeTemperature}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FormControlLabel value='metric' control={<Radio />} label='Celcius' />\n\t\t\t\t\t\t\t<FormControlLabel value='imperial' control={<Radio />} label='Fahrenheit' />\n\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t{isLoading ? (\n\t\t\t\t\t<div className='loading'>\n\t\t\t\t\t\t<Lottie options={defaultLottieOptions} height={150} width={150} />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<Carousel\n\t\t\t\t\t\tdata={weatherData ? weatherData.list : [1, 2, 3, 4, 5, 6]}\n\t\t\t\t\t\ttemperatureUnit={temperatureUnit}\n\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t);\n\t}\n}\nexport default connect(\n\tstate => ({\n\t\tweatherData: state.weatherData,\n\t}),\n\tdispatch => ({\n\t\tsetWeatherDataDispatch: data => dispatch(setWeatherData(data)),\n\t})\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport { configureStore } from './store';\nimport './styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={configureStore()}>\n\t\t\t<div className='App'>\n\t\t\t\t<AppBar position='static'>\n\t\t\t\t\t<Toolbar variant='dense'>\n\t\t\t\t\t\t<Typography align='center' variant='h6' color='inherit'>\n\t\t\t\t\t\t\tWeather App\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<App />\n\t\t\t</div>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\n\nimport reducers from './reducers';\n\nexport function configureStore(initialState = {}) {\n\treturn createStore(reducers, initialState);\n}\n"],"sourceRoot":""}